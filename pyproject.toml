[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "b3desk"
version = "1.4.2dev"
description = "Outil de visioconférence pour les agents de l'Education Nationale et de l'Etat en général."
authors = ["Your Name <you@example.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = ">=3.9,<4.0"
celery = "^5.2.7"
filetype = "^1.2.0"
flask = "^3.0.0"
flask-babel = "^4.0.0"
flask-caching = "^2.0.2"
flask-uploads = "0.2.1"
flask-migrate = "^4.0.5"
flask-pyoidc = "^3.14.2"
flask-sqlalchemy = "^3.0.3"
flask-wtf = "^1.2.1"
gunicorn = "21.2.0"
joserfc = "^1.1.0"
netaddr = "^1.2.1"
psycopg2 = "^2.9.3"
pydantic = "^2.11.0"
pydantic-settings = "^2.10.0"
python-slugify = "^8.0.4"
redis = "^5.0.1"
requests = "^2.27.1"
sentry-sdk = "^2.3.1"
sqlalchemy = "^1.4.31"
sqlalchemy-json = "^0.7.0"
sqlalchemy-utils = "^0.41.1"
webdavclient3 = "3.14.6"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
coverage = "^7.2.2"
flake8 = "^7.0.0"
Flask-WebTest = "^0.1.6"
prek = "^0.1.3"
pyquery = "^2.0.0"
pytest = "^8.0.0"
pytest-cov = "^5.0.0"
pytest-dotenv = "^0.5.2"
pytest-iam = "^0.0.12,<0.1"
pytest-mock = "^3.11.1"
pytest-smtpd = "^0.1.0"
time-machine = "^2.19.0"
wsgidav = "^4.3.1"

# This is used to allow flask-webtest > webtest > webob to be compatible with py3.13+
legacy-cgi = {version = "^2.6.3", python = ">=3.13" }

# Set a maximum version for Canaille, until we can upgrade to pytest-iam 0.2.4
Canaille = "<0.0.54"
authlib = "<1.6.0"

[tool.poetry.group.doc]
optional = true

[tool.poetry.group.doc.dependencies]
autodoc-pydantic = "^2.2.0"
myst-parser = "^2.0.0"
sphinx = "^7.0.0"
sphinx-rtd-theme = "^2.0.0"
sphinx-issues = "^4.0.0"

[tool.pytest.ini_options]
testpaths = "web"
markers = [
    "secure: cloud auth responds with a https url",
    "no_scheme: cloud auth responds without any scheme for url",
]

[tool.ruff.lint]
ignore = [
    "E501",  # line too long
    "E722",  # bare expect
    "E402",  # import not at the top of the file
]

[tool.tox]
requires = ["tox>=4.19"]
env_list = ["style", "py39", "py310", "py311", "py312", "py313", "coverage", "doc"]
no_package = true

[tool.tox.env_run_base]
allowlist_externals = ["poetry"]
commands = [
    ["poetry", "install", "--with", "dev"],
    ["poetry", "run", "pytest", "{posargs:web}"]
]

[tool.tox.env.style]
commands = [
    ["poetry", "install", "--with", "dev"],
    ["poetry", "run", "prek", "run", "--all-files"]
]

[tool.tox.env.coverage]
allowlist_externals = ["poetry"]
commands = [
    ["poetry", "install", "--with", "dev"],
    ["poetry", "run", "pytest", "--cov", "--cov-report", "term:skip-covered", "{posargs:web}"],
    ["poetry", "run", "coverage", "html"]
]

[tool.tox.env.doc]
allowlist_externals = ["poetry"]
commands = [
    ["poetry", "install", "--with", "doc"],
    ["poetry", "run", "sphinx-build", "-W", "--keep-going", "documentation", "build/sphinx/html"]
]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "except ImportError",
]
partial_branches = [
    "pragma: no branch",
    "if app.debug",
    "if app.testing",
]
